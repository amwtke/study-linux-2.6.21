example

#define MAX_EVENTS 10 // 定义处理的最大事件个数

struct epoll_event ev, events[MAX_EVENTS]; // 初始化ev数据载体和接收准备好的fd的事件数组

int listen_sock, conn_sock, nfds, epollfd; // 初始化监听连接的listen_sock fd、客户端连接conn_sock fd、接收epoll_wait函数返回的准备好事件的个数变量nfds、Epoll对象epollfd fd

epollfd = epoll_create(10); // 创建epoll对象

if (epollfd == -1) {

  perror("epoll_create");

  exit(EXIT_FAILURE);

}

// 设置ev数据载体。设置感兴趣事件为EPOLLIN代表读事件

ev.events = EPOLLIN;

ev.data.fd = listen_sock; // 设置用户数据载体中的fd为listen_sock

if (epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &ev) == -1) { // 将其添加到epoll监听列表中

  perror("epoll_ctl: listen_sock");

  exit(EXIT_FAILURE);

}

// 循环处理所有事件

for (;;) {

  nfds = epoll_wait(epollfd, events, MAX_EVENTS, -1); // 查询epoll函数中是否有准备好的事件，我们这里使用events数组来接收准备好的事件fd，使用MAX_EVENTS来指定接收的最大事件数量，使用-1来表明timeout为无限期，也即当没有事件时阻塞当前进程

  if (nfds == -1) {

    perror("epoll_pwait");

    exit(EXIT_FAILURE);

 }

  for (n = 0; n < nfds; ++n) { // 循环处理已经准备好事件的fd

    if (events[n].data.fd == listen_sock) { // 我们这里以处理监听客户端连接的listen_sock fd为例说明

      conn_sock = accept(listen_sock,(struct sockaddr *) &local, &addrlen); // 接收客户端连接

      if (conn_sock == -1) {

        perror("accept");

        exit(EXIT_FAILURE);

     }

      setnonblocking(conn_sock); // 设置客户端fd为非阻塞模式

      ev.events = EPOLLIN | EPOLLET; // 设置触发模式为ET并且感兴趣事件类型为EPOLLIN读事件

      ev.data.fd = conn_sock; // 指定数据载体fd为conn_sock

      if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,&ev) == -1) { // 将其添加到Epoll监听对象中

        perror("epoll_ctl: conn_sock");

        exit(EXIT_FAILURE);

     }

   } else { // 如果是其他事件，我们还可以继续处理

      do_use_fd(events[n].data.fd);

   }

 }

}

